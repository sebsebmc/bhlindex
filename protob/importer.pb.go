// Code generated by protoc-gen-go. DO NOT EDIT.
// source: importer.proto

package protob

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ColumnName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColumnName) Reset()         { *m = ColumnName{} }
func (m *ColumnName) String() string { return proto.CompactTextString(m) }
func (*ColumnName) ProtoMessage()    {}
func (*ColumnName) Descriptor() ([]byte, []int) {
	return fileDescriptor_394990ff89e0d02b, []int{0}
}

func (m *ColumnName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnName.Unmarshal(m, b)
}
func (m *ColumnName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnName.Marshal(b, m, deterministic)
}
func (m *ColumnName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnName.Merge(m, src)
}
func (m *ColumnName) XXX_Size() int {
	return xxx_messageInfo_ColumnName.Size(m)
}
func (m *ColumnName) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnName.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnName proto.InternalMessageInfo

func (m *ColumnName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ColumnId struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColumnId) Reset()         { *m = ColumnId{} }
func (m *ColumnId) String() string { return proto.CompactTextString(m) }
func (*ColumnId) ProtoMessage()    {}
func (*ColumnId) Descriptor() ([]byte, []int) {
	return fileDescriptor_394990ff89e0d02b, []int{1}
}

func (m *ColumnId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnId.Unmarshal(m, b)
}
func (m *ColumnId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnId.Marshal(b, m, deterministic)
}
func (m *ColumnId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnId.Merge(m, src)
}
func (m *ColumnId) XXX_Size() int {
	return xxx_messageInfo_ColumnId.Size(m)
}
func (m *ColumnId) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnId.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnId proto.InternalMessageInfo

func (m *ColumnId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ColumnList struct {
	Columns              []*ColumnList_ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ColumnList) Reset()         { *m = ColumnList{} }
func (m *ColumnList) String() string { return proto.CompactTextString(m) }
func (*ColumnList) ProtoMessage()    {}
func (*ColumnList) Descriptor() ([]byte, []int) {
	return fileDescriptor_394990ff89e0d02b, []int{2}
}

func (m *ColumnList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnList.Unmarshal(m, b)
}
func (m *ColumnList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnList.Marshal(b, m, deterministic)
}
func (m *ColumnList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnList.Merge(m, src)
}
func (m *ColumnList) XXX_Size() int {
	return xxx_messageInfo_ColumnList.Size(m)
}
func (m *ColumnList) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnList.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnList proto.InternalMessageInfo

func (m *ColumnList) GetColumns() []*ColumnList_ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

type ColumnList_ColumnInfo struct {
	Id                   *ColumnId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 *ColumnName `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ColumnList_ColumnInfo) Reset()         { *m = ColumnList_ColumnInfo{} }
func (m *ColumnList_ColumnInfo) String() string { return proto.CompactTextString(m) }
func (*ColumnList_ColumnInfo) ProtoMessage()    {}
func (*ColumnList_ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_394990ff89e0d02b, []int{2, 0}
}

func (m *ColumnList_ColumnInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnList_ColumnInfo.Unmarshal(m, b)
}
func (m *ColumnList_ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnList_ColumnInfo.Marshal(b, m, deterministic)
}
func (m *ColumnList_ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnList_ColumnInfo.Merge(m, src)
}
func (m *ColumnList_ColumnInfo) XXX_Size() int {
	return xxx_messageInfo_ColumnList_ColumnInfo.Size(m)
}
func (m *ColumnList_ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnList_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnList_ColumnInfo proto.InternalMessageInfo

func (m *ColumnList_ColumnInfo) GetId() *ColumnId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ColumnList_ColumnInfo) GetName() *ColumnName {
	if m != nil {
		return m.Name
	}
	return nil
}

type PageData struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JsonData             string    `protobuf:"bytes,2,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
	Col                  *ColumnId `protobuf:"bytes,3,opt,name=col,proto3" json:"col,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PageData) Reset()         { *m = PageData{} }
func (m *PageData) String() string { return proto.CompactTextString(m) }
func (*PageData) ProtoMessage()    {}
func (*PageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_394990ff89e0d02b, []int{3}
}

func (m *PageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageData.Unmarshal(m, b)
}
func (m *PageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageData.Marshal(b, m, deterministic)
}
func (m *PageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageData.Merge(m, src)
}
func (m *PageData) XXX_Size() int {
	return xxx_messageInfo_PageData.Size(m)
}
func (m *PageData) XXX_DiscardUnknown() {
	xxx_messageInfo_PageData.DiscardUnknown(m)
}

var xxx_messageInfo_PageData proto.InternalMessageInfo

func (m *PageData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PageData) GetJsonData() string {
	if m != nil {
		return m.JsonData
	}
	return ""
}

func (m *PageData) GetCol() *ColumnId {
	if m != nil {
		return m.Col
	}
	return nil
}

type TitleData struct {
	Id                   int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	JsonData             int32     `protobuf:"varint,2,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
	Col                  *ColumnId `protobuf:"bytes,3,opt,name=col,proto3" json:"col,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TitleData) Reset()         { *m = TitleData{} }
func (m *TitleData) String() string { return proto.CompactTextString(m) }
func (*TitleData) ProtoMessage()    {}
func (*TitleData) Descriptor() ([]byte, []int) {
	return fileDescriptor_394990ff89e0d02b, []int{4}
}

func (m *TitleData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TitleData.Unmarshal(m, b)
}
func (m *TitleData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TitleData.Marshal(b, m, deterministic)
}
func (m *TitleData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitleData.Merge(m, src)
}
func (m *TitleData) XXX_Size() int {
	return xxx_messageInfo_TitleData.Size(m)
}
func (m *TitleData) XXX_DiscardUnknown() {
	xxx_messageInfo_TitleData.DiscardUnknown(m)
}

var xxx_messageInfo_TitleData proto.InternalMessageInfo

func (m *TitleData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TitleData) GetJsonData() int32 {
	if m != nil {
		return m.JsonData
	}
	return 0
}

func (m *TitleData) GetCol() *ColumnId {
	if m != nil {
		return m.Col
	}
	return nil
}

type PageNameData struct {
	PageId               string    `protobuf:"bytes,1,opt,name=pageId,proto3" json:"pageId,omitempty"`
	NameStart            int32     `protobuf:"varint,2,opt,name=name_start,json=nameStart,proto3" json:"name_start,omitempty"`
	JsonData             string    `protobuf:"bytes,3,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
	Col                  *ColumnId `protobuf:"bytes,4,opt,name=col,proto3" json:"col,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PageNameData) Reset()         { *m = PageNameData{} }
func (m *PageNameData) String() string { return proto.CompactTextString(m) }
func (*PageNameData) ProtoMessage()    {}
func (*PageNameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_394990ff89e0d02b, []int{5}
}

func (m *PageNameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageNameData.Unmarshal(m, b)
}
func (m *PageNameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageNameData.Marshal(b, m, deterministic)
}
func (m *PageNameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageNameData.Merge(m, src)
}
func (m *PageNameData) XXX_Size() int {
	return xxx_messageInfo_PageNameData.Size(m)
}
func (m *PageNameData) XXX_DiscardUnknown() {
	xxx_messageInfo_PageNameData.DiscardUnknown(m)
}

var xxx_messageInfo_PageNameData proto.InternalMessageInfo

func (m *PageNameData) GetPageId() string {
	if m != nil {
		return m.PageId
	}
	return ""
}

func (m *PageNameData) GetNameStart() int32 {
	if m != nil {
		return m.NameStart
	}
	return 0
}

func (m *PageNameData) GetJsonData() string {
	if m != nil {
		return m.JsonData
	}
	return ""
}

func (m *PageNameData) GetCol() *ColumnId {
	if m != nil {
		return m.Col
	}
	return nil
}

type Success struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Success) Reset()         { *m = Success{} }
func (m *Success) String() string { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()    {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_394990ff89e0d02b, []int{6}
}

func (m *Success) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Success.Unmarshal(m, b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Success.Marshal(b, m, deterministic)
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return xxx_messageInfo_Success.Size(m)
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

func (m *Success) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func init() {
	proto.RegisterType((*ColumnName)(nil), "ColumnName")
	proto.RegisterType((*ColumnId)(nil), "ColumnId")
	proto.RegisterType((*ColumnList)(nil), "ColumnList")
	proto.RegisterType((*ColumnList_ColumnInfo)(nil), "ColumnList.ColumnInfo")
	proto.RegisterType((*PageData)(nil), "PageData")
	proto.RegisterType((*TitleData)(nil), "TitleData")
	proto.RegisterType((*PageNameData)(nil), "PageNameData")
	proto.RegisterType((*Success)(nil), "Success")
}

func init() { proto.RegisterFile("importer.proto", fileDescriptor_394990ff89e0d02b) }

var fileDescriptor_394990ff89e0d02b = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0xab, 0xd3, 0x40,
	0x14, 0x6d, 0x92, 0x7e, 0x24, 0x37, 0xb5, 0xca, 0x2c, 0x4a, 0x8d, 0xa8, 0x25, 0xab, 0x16, 0x65,
	0xd0, 0xfa, 0x0f, 0xaa, 0x0b, 0x03, 0x52, 0x24, 0x2d, 0x2e, 0xdc, 0x48, 0x9a, 0x4c, 0x43, 0x24,
	0xc9, 0xd4, 0xcc, 0x04, 0x71, 0xe3, 0xfa, 0xfd, 0x87, 0xf7, 0x67, 0x1f, 0xf3, 0x91, 0x8f, 0x96,
	0xf2, 0x78, 0xab, 0xb9, 0xf7, 0xce, 0xb9, 0xe7, 0x9c, 0xcb, 0xbd, 0x30, 0xcb, 0x8a, 0x33, 0xad,
	0x38, 0xa9, 0xf0, 0xb9, 0xa2, 0x9c, 0x7a, 0x53, 0xf9, 0x1c, 0x55, 0xe6, 0x2f, 0x01, 0x3e, 0xd3,
	0xbc, 0x2e, 0xca, 0x5d, 0x54, 0x10, 0x84, 0x60, 0x58, 0x46, 0x05, 0x59, 0x18, 0x4b, 0x63, 0xe5,
	0x84, 0x32, 0xf6, 0x3d, 0xb0, 0x15, 0x22, 0x48, 0xd0, 0x0c, 0xcc, 0x2c, 0x91, 0xbf, 0xa3, 0xd0,
	0xcc, 0x12, 0xff, 0xce, 0x68, 0xda, 0xbf, 0x65, 0x8c, 0xa3, 0x0f, 0x30, 0x89, 0x65, 0xc6, 0x16,
	0xc6, 0xd2, 0x5a, 0xb9, 0x9b, 0x39, 0xee, 0x7e, 0x75, 0x18, 0x94, 0x27, 0x1a, 0x36, 0x30, 0xef,
	0x6b, 0xd3, 0x2f, 0xca, 0xe8, 0x65, 0x4b, 0xef, 0x6e, 0x9c, 0x06, 0x9f, 0x08, 0x25, 0xf4, 0x56,
	0x3b, 0x33, 0xe5, 0xa7, 0x8b, 0x3b, 0xd3, 0xda, 0xe6, 0x1e, 0xec, 0xef, 0x51, 0x4a, 0xbe, 0x44,
	0x3c, 0xea, 0xd9, 0x74, 0x64, 0xb3, 0x07, 0xf6, 0x6f, 0x46, 0x4b, 0xf1, 0x27, 0x09, 0x9c, 0xb0,
	0xcd, 0xd1, 0x2b, 0xb0, 0x62, 0x9a, 0x2f, 0xac, 0x6b, 0x51, 0x51, 0xf5, 0x0f, 0xe0, 0x1c, 0x32,
	0x9e, 0x5f, 0xb3, 0x8e, 0x6e, 0xb2, 0x8e, 0x9e, 0xca, 0xfa, 0x1f, 0xa6, 0xc2, 0xaa, 0x30, 0x2f,
	0xc1, 0x73, 0x18, 0x9f, 0xa3, 0x94, 0x04, 0x8d, 0x65, 0x9d, 0xa1, 0xd7, 0x00, 0x62, 0xb4, 0x5f,
	0x8c, 0x47, 0x15, 0xd7, 0x12, 0x8e, 0xa8, 0xec, 0x45, 0xe1, 0x42, 0xdf, 0xba, 0x3d, 0xd5, 0xf0,
	0xa6, 0xfe, 0x1a, 0x26, 0xfb, 0x3a, 0x8e, 0x09, 0x63, 0xe8, 0x0d, 0x00, 0x53, 0xe1, 0xa9, 0xce,
	0xa5, 0xbc, 0x1d, 0xf6, 0x2a, 0x9b, 0x7b, 0x13, 0xec, 0x40, 0xdf, 0x0f, 0x7a, 0x0f, 0x2f, 0x2a,
	0xf2, 0xa7, 0x26, 0x8c, 0xef, 0xc8, 0x5f, 0x45, 0x89, 0xfa, 0x9b, 0xf0, 0x3a, 0x21, 0x7f, 0x80,
	0xd6, 0x00, 0x29, 0xe1, 0xaa, 0xc0, 0xd0, 0x14, 0xeb, 0xb3, 0xfb, 0x41, 0xb3, 0xc4, 0x73, 0x7b,
	0x77, 0xe1, 0x0f, 0xd0, 0x3b, 0x78, 0xde, 0x42, 0xb7, 0xff, 0xe4, 0x25, 0x3e, 0xc6, 0x3b, 0xcb,
	0xca, 0x94, 0x30, 0xde, 0xae, 0xdb, 0xc1, 0x4d, 0xe8, 0xd9, 0x58, 0x4f, 0xe6, 0x0f, 0x56, 0x86,
	0xe0, 0x55, 0xd0, 0x6e, 0x89, 0x80, 0xdb, 0xf8, 0x0a, 0xfc, 0x11, 0x50, 0xc7, 0xdb, 0xee, 0xe6,
	0x19, 0xee, 0xa7, 0x97, 0x2d, 0x5b, 0xfb, 0xe7, 0x58, 0x4d, 0x75, 0x54, 0xef, 0xa7, 0x87, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xbd, 0x09, 0x6d, 0x66, 0x6d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImporterClient is the client API for Importer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImporterClient interface {
	RequestNewColumn(ctx context.Context, in *ColumnName, opts ...grpc.CallOption) (*ColumnId, error)
	GetColumns(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ColumnList, error)
	GetColumnByName(ctx context.Context, in *ColumnName, opts ...grpc.CallOption) (*ColumnId, error)
	IngestPageData(ctx context.Context, opts ...grpc.CallOption) (Importer_IngestPageDataClient, error)
	IngestTitleData(ctx context.Context, opts ...grpc.CallOption) (Importer_IngestTitleDataClient, error)
	IngestPageNameData(ctx context.Context, opts ...grpc.CallOption) (Importer_IngestPageNameDataClient, error)
}

type importerClient struct {
	cc *grpc.ClientConn
}

func NewImporterClient(cc *grpc.ClientConn) ImporterClient {
	return &importerClient{cc}
}

func (c *importerClient) RequestNewColumn(ctx context.Context, in *ColumnName, opts ...grpc.CallOption) (*ColumnId, error) {
	out := new(ColumnId)
	err := c.cc.Invoke(ctx, "/Importer/requestNewColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) GetColumns(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ColumnList, error) {
	out := new(ColumnList)
	err := c.cc.Invoke(ctx, "/Importer/getColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) GetColumnByName(ctx context.Context, in *ColumnName, opts ...grpc.CallOption) (*ColumnId, error) {
	out := new(ColumnId)
	err := c.cc.Invoke(ctx, "/Importer/getColumnByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importerClient) IngestPageData(ctx context.Context, opts ...grpc.CallOption) (Importer_IngestPageDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Importer_serviceDesc.Streams[0], "/Importer/ingestPageData", opts...)
	if err != nil {
		return nil, err
	}
	x := &importerIngestPageDataClient{stream}
	return x, nil
}

type Importer_IngestPageDataClient interface {
	Send(*PageData) error
	CloseAndRecv() (*Success, error)
	grpc.ClientStream
}

type importerIngestPageDataClient struct {
	grpc.ClientStream
}

func (x *importerIngestPageDataClient) Send(m *PageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importerIngestPageDataClient) CloseAndRecv() (*Success, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Success)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importerClient) IngestTitleData(ctx context.Context, opts ...grpc.CallOption) (Importer_IngestTitleDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Importer_serviceDesc.Streams[1], "/Importer/ingestTitleData", opts...)
	if err != nil {
		return nil, err
	}
	x := &importerIngestTitleDataClient{stream}
	return x, nil
}

type Importer_IngestTitleDataClient interface {
	Send(*TitleData) error
	CloseAndRecv() (*Success, error)
	grpc.ClientStream
}

type importerIngestTitleDataClient struct {
	grpc.ClientStream
}

func (x *importerIngestTitleDataClient) Send(m *TitleData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importerIngestTitleDataClient) CloseAndRecv() (*Success, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Success)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importerClient) IngestPageNameData(ctx context.Context, opts ...grpc.CallOption) (Importer_IngestPageNameDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Importer_serviceDesc.Streams[2], "/Importer/ingestPageNameData", opts...)
	if err != nil {
		return nil, err
	}
	x := &importerIngestPageNameDataClient{stream}
	return x, nil
}

type Importer_IngestPageNameDataClient interface {
	Send(*PageNameData) error
	CloseAndRecv() (*Success, error)
	grpc.ClientStream
}

type importerIngestPageNameDataClient struct {
	grpc.ClientStream
}

func (x *importerIngestPageNameDataClient) Send(m *PageNameData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importerIngestPageNameDataClient) CloseAndRecv() (*Success, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Success)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImporterServer is the server API for Importer service.
type ImporterServer interface {
	RequestNewColumn(context.Context, *ColumnName) (*ColumnId, error)
	GetColumns(context.Context, *Void) (*ColumnList, error)
	GetColumnByName(context.Context, *ColumnName) (*ColumnId, error)
	IngestPageData(Importer_IngestPageDataServer) error
	IngestTitleData(Importer_IngestTitleDataServer) error
	IngestPageNameData(Importer_IngestPageNameDataServer) error
}

func RegisterImporterServer(s *grpc.Server, srv ImporterServer) {
	s.RegisterService(&_Importer_serviceDesc, srv)
}

func _Importer_RequestNewColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).RequestNewColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importer/RequestNewColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).RequestNewColumn(ctx, req.(*ColumnName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_GetColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).GetColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importer/GetColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).GetColumns(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_GetColumnByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImporterServer).GetColumnByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Importer/GetColumnByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImporterServer).GetColumnByName(ctx, req.(*ColumnName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Importer_IngestPageData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImporterServer).IngestPageData(&importerIngestPageDataServer{stream})
}

type Importer_IngestPageDataServer interface {
	SendAndClose(*Success) error
	Recv() (*PageData, error)
	grpc.ServerStream
}

type importerIngestPageDataServer struct {
	grpc.ServerStream
}

func (x *importerIngestPageDataServer) SendAndClose(m *Success) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importerIngestPageDataServer) Recv() (*PageData, error) {
	m := new(PageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Importer_IngestTitleData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImporterServer).IngestTitleData(&importerIngestTitleDataServer{stream})
}

type Importer_IngestTitleDataServer interface {
	SendAndClose(*Success) error
	Recv() (*TitleData, error)
	grpc.ServerStream
}

type importerIngestTitleDataServer struct {
	grpc.ServerStream
}

func (x *importerIngestTitleDataServer) SendAndClose(m *Success) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importerIngestTitleDataServer) Recv() (*TitleData, error) {
	m := new(TitleData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Importer_IngestPageNameData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImporterServer).IngestPageNameData(&importerIngestPageNameDataServer{stream})
}

type Importer_IngestPageNameDataServer interface {
	SendAndClose(*Success) error
	Recv() (*PageNameData, error)
	grpc.ServerStream
}

type importerIngestPageNameDataServer struct {
	grpc.ServerStream
}

func (x *importerIngestPageNameDataServer) SendAndClose(m *Success) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importerIngestPageNameDataServer) Recv() (*PageNameData, error) {
	m := new(PageNameData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Importer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Importer",
	HandlerType: (*ImporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestNewColumn",
			Handler:    _Importer_RequestNewColumn_Handler,
		},
		{
			MethodName: "getColumns",
			Handler:    _Importer_GetColumns_Handler,
		},
		{
			MethodName: "getColumnByName",
			Handler:    _Importer_GetColumnByName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ingestPageData",
			Handler:       _Importer_IngestPageData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ingestTitleData",
			Handler:       _Importer_IngestTitleData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ingestPageNameData",
			Handler:       _Importer_IngestPageNameData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "importer.proto",
}
